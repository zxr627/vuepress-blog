import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as a}from"./app-244kRLAi.js";const t={};function l(r,s){return a(),e("div",null,[...s[0]||(s[0]=[n(`<h1 id="redis-学习小结-——-以-refresh-token-存储为例" tabindex="-1"><a class="header-anchor" href="#redis-学习小结-——-以-refresh-token-存储为例"><span>Redis 学习小结 —— 以 Refresh Token 存储为例</span></a></h1><h2 id="📖-redis-简介" tabindex="-1"><a class="header-anchor" href="#📖-redis-简介"><span>📖 Redis 简介</span></a></h2><p>Redis（Remote Dictionary Server）是一个基于内存的高性能 <strong>键值数据库</strong>，以其超快的读写速度、丰富的数据结构和内置过期机制，被广泛应用在缓存、分布式存储、消息队列等场景中。</p><p><strong>常见应用场景：</strong></p><ul><li><strong>缓存层</strong>：减少数据库压力，加快响应速度</li><li><strong>分布式锁</strong>：利用原子操作实现高效锁机制</li><li><strong>消息队列</strong>：通过 <code>list</code> 或 <code>stream</code> 作为消息中转</li><li><strong>Token 管理</strong>：存储用户登录状态和刷新令牌（Refresh Token）</li></ul><hr><h2 id="🔑-为什么要用-refresh-token" tabindex="-1"><a class="header-anchor" href="#🔑-为什么要用-refresh-token"><span>🔑 为什么要用 Refresh Token</span></a></h2><p>在 Web 系统中，用户认证通常使用 JWT（JSON Web Token）。</p><p>但存在一个矛盾：</p><ul><li><strong>Access Token 太长</strong>：容易泄露，风险高</li><li><strong>Refresh Token 太短</strong>：用户频繁掉线，体验差</li></ul><p>👉 于是就有了 <strong>双 Token 机制</strong>：</p><ul><li><strong>Access Token</strong>：短期有效（如 15 分钟），用于接口调用认证</li><li><strong>Refresh Token</strong>：长期有效（如 7 天），用于刷新 Access Token</li></ul><p>这样即便 Access Token 过期，用户只要 Refresh Token 还有效，就可以“无感续期”，提升体验。</p><hr><h2 id="📦-为什么选择-redis-存储-refresh-token" tabindex="-1"><a class="header-anchor" href="#📦-为什么选择-redis-存储-refresh-token"><span>📦 为什么选择 Redis 存储 Refresh Token</span></a></h2><ul><li><strong>高性能</strong>：Redis 基于内存，读写速度极快</li><li><strong>天然过期机制</strong>：支持 TTL（Time To Live），不用额外写清理逻辑</li><li><strong>集中式管理</strong>：分布式环境下多服务共享同一份 Redis</li><li><strong>易于注销</strong>：用户退出时，直接删除 Redis 的 Key 即可</li></ul><hr><h2 id="⚙️-refresh-token-存储思路" tabindex="-1"><a class="header-anchor" href="#⚙️-refresh-token-存储思路"><span>⚙️ Refresh Token 存储思路</span></a></h2><ol><li><p>用户登录成功后：</p><ul><li>生成 <strong>Access Token</strong>（短期）</li><li>生成 <strong>Refresh Token</strong>（长期）</li><li>将 Refresh Token 存入 Redis，并设置过期时间</li></ul></li><li><p>用户刷新 Access Token 时：</p><ul><li>校验用户传来的 Refresh Token 是否和 Redis 中一致</li><li>如果有效 → 生成新的 Access Token</li><li>如果无效 / 过期 → 要求重新登录</li></ul></li></ol><hr><h2 id="📝-redis-存储示例" tabindex="-1"><a class="header-anchor" href="#📝-redis-存储示例"><span>📝 Redis 存储示例</span></a></h2><p>常见的存储方式：<strong>用户 ID 作为 key</strong>，Refresh Token 作为 value。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">SETEX</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> refresh_token:123</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 604800</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;eyJhbGciOiJIUzI1NiIs...&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">javascript</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Redis = require(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">&#39;ioredis&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> redis = new Redis();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 保存 Refresh Token（7 天有效期）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">async</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> function saveRefreshToken(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">userId,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> token) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  await</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> redis.set(\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">refresh_token:$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">{userId}\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> token, &quot;EX&quot;, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 24</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 60</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 60</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">);</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 校验 Refresh Token 是否有效</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">async</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> function verifyRefreshToken(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">userId,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> token) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  const</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> storedToken = await redis.get(\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">refresh_token:$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">{userId}\`);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> storedToken === token;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 删除 Refresh Token（用户登出）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">async</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> function deleteRefreshToken(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">userId</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  await</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> redis.del(\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">refresh_token:$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">{userId}\`);</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23)])])}const p=i(t,[["render",l],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/Database/NoSQL/","title":"Redis 学习小结 —— 以 Refresh Token 存储为例","lang":"zh-CN","frontmatter":{"order":7,"date":"2025-09-11T00:00:00.000Z","category":["Redis"],"description":"Redis 学习小结 —— 以 Refresh Token 存储为例 📖 Redis 简介 Redis（Remote Dictionary Server）是一个基于内存的高性能 键值数据库，以其超快的读写速度、丰富的数据结构和内置过期机制，被广泛应用在缓存、分布式存储、消息队列等场景中。 常见应用场景： 缓存层：减少数据库压力，加快响应速度 分布式锁...","head":[["meta",{"property":"og:url","content":"https://zxroo.top/Database/NoSQL/"}],["meta",{"property":"og:site_name","content":"Zxr's Blog"}],["meta",{"property":"og:title","content":"Redis 学习小结 —— 以 Refresh Token 存储为例"}],["meta",{"property":"og:description","content":"Redis 学习小结 —— 以 Refresh Token 存储为例 📖 Redis 简介 Redis（Remote Dictionary Server）是一个基于内存的高性能 键值数据库，以其超快的读写速度、丰富的数据结构和内置过期机制，被广泛应用在缓存、分布式存储、消息队列等场景中。 常见应用场景： 缓存层：减少数据库压力，加快响应速度 分布式锁..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-16T10:02:44.000Z"}],["meta",{"property":"article:published_time","content":"2025-09-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-16T10:02:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 学习小结 —— 以 Refresh Token 存储为例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-16T10:02:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"📖 Redis 简介","slug":"📖-redis-简介","link":"#📖-redis-简介","children":[]},{"level":2,"title":"🔑 为什么要用 Refresh Token","slug":"🔑-为什么要用-refresh-token","link":"#🔑-为什么要用-refresh-token","children":[]},{"level":2,"title":"📦 为什么选择 Redis 存储 Refresh Token","slug":"📦-为什么选择-redis-存储-refresh-token","link":"#📦-为什么选择-redis-存储-refresh-token","children":[]},{"level":2,"title":"⚙️ Refresh Token 存储思路","slug":"⚙️-refresh-token-存储思路","link":"#⚙️-refresh-token-存储思路","children":[]},{"level":2,"title":"📝 Redis 存储示例","slug":"📝-redis-存储示例","link":"#📝-redis-存储示例","children":[]}],"git":{"createdTime":1757488086000,"updatedTime":1760608964000,"contributors":[{"name":"zhaoxinrong","email":"“zhaoxr@cwanwu.com”","commits":7}]},"readingTime":{"minutes":1.85,"words":556},"filePathRelative":"Database/NoSQL/README.md","localizedDate":"2025年9月11日","excerpt":"","autoDesc":true}`);export{p as comp,d as data};
